<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/tags/flask/</link>
    <description>Recent content in Flask on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jul 2024 10:30:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/tags/flask/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker-Compose와 Dockerfile을 활용한 Flask-MySQL 연동 예제</title>
      <link>https://dschloe.github.io/mlops/2024/07/docker_compose_dockerfile_flask_mysql/</link>
      <pubDate>Tue, 02 Jul 2024 10:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/mlops/2024/07/docker_compose_dockerfile_flask_mysql/</guid>
      <description>개요 Docker-Compose와 Dockerfile의 주요 기능을 이해한다. 각 파일의 위치와 주요 기능을 이해한다. 전체 프로젝트 파일 디렉터리 본 프로젝트의 전체 코드는 다음과 같다. 실제 코드 작성을 해야하는 곳은 다음과 같다. app.py requirements.txt init.sql docker-compose.yml Dockerfile docker_kubernetes_flask/ ├── app/ │ ├── __init__.py │ ├── app.py │ └── requirements.txt ├── db/ │ ├── init.sql │ └── data/ (This will be created by Docker) ├── docker-compose.yml └── Dockerfile 사전준비 사전에 Docker는 Desktop 설치가 되어 있다고 가정한다.</description>
    </item>
    
    <item>
      <title>Flask Web Resume Using Templates</title>
      <link>https://dschloe.github.io/python/python_edu/09_web/flask_web_resume/</link>
      <pubDate>Sat, 03 Sep 2022 10:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/09_web/flask_web_resume/</guid>
      <description>개요 Flask 웹개발을 통해 간단한 Resume를 작성해본다. 가상환경 프로젝트 폴더에 가상환경을 설치한다. virtualenv venv created virtual environment CPython3.9.12.final.0-64 in 5343ms creator CPython3Windows(dest=C:\Users\human\Desktop\flask-resume-evan-examples\venv, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\Users\human\AppData\Local\pypa\virtualenv) added seed packages: pip==22.2.2, setuptools==63.2.0, wheel==0.37.1 activators BashActivator,BatchActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator 라이브러리 설치 가상환경에 접속 후, Flask 라이브러리를 설치한다. pip install Flask [app.py](http://app.py) 에 다음과 같이 작성한다. from flask import Flask, render_template app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def index(): first_name = &amp;#39;Evan&amp;#39; return render_template(&amp;#39;index.</description>
    </item>
    
    <item>
      <title>Dash App Using Flask Factory Pattern and Blueprint - 2</title>
      <link>https://dschloe.github.io/python/dash/dash_app_factory_pattern_2/</link>
      <pubDate>Fri, 26 Aug 2022 09:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/dash/dash_app_factory_pattern_2/</guid>
      <description>강의 홍보 취준생을 위한 강의를 제작하였습니다. 본 블로그를 통해서 강의를 수강하신 분은 게시글 제목과 링크를 수강하여 인프런 메시지를 통해 보내주시기를 바랍니다. 스타벅스 아이스 아메리카노를 선물로 보내드리겠습니다. [비전공자 대환영] 제로베이스도 쉽게 입문하는 파이썬 데이터 분석 - 캐글입문기 개요 기존 Flask-Dash-Heroku 연동 예제를 업그레이드 한다. Flask Factory Application의 기본 개념 및 Blueprint의 기본 개념을 이해한다. Dash App을 Flask Factory Application에 맞추어 가공 한다. 리뷰 기존 필자가 작성해두었던 Flask-Dash-Heroku App을 리뷰한다. 참조 : Flask-Dash-Heroku 연동 참조 : Dash App Using Flask Factory Pattern and Blueprint - 1 미리보기 다음과 같이 메뉴가 있도록 코드를 작성할 예정이다.</description>
    </item>
    
    <item>
      <title>Dash App Using Flask Factory Pattern and Blueprint - 1</title>
      <link>https://dschloe.github.io/python/dash/dash_app_factory_pattern_1/</link>
      <pubDate>Thu, 25 Aug 2022 09:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/dash/dash_app_factory_pattern_1/</guid>
      <description>강의 홍보 취준생을 위한 강의를 제작하였습니다. 본 블로그를 통해서 강의를 수강하신 분은 게시글 제목과 링크를 수강하여 인프런 메시지를 통해 보내주시기를 바랍니다. 스타벅스 아이스 아메리카노를 선물로 보내드리겠습니다. [비전공자 대환영] 제로베이스도 쉽게 입문하는 파이썬 데이터 분석 - 캐글입문기 개요 기존 Flask-Dash-Heroku 연동 예제를 업그레이드 한다. Flask Factory Application의 기본 개념 및 Blueprint의 기본 개념을 이해한다. 리뷰 기존 필자가 작성해두었던 Flask-Dash-Heroku App을 리뷰한다. 참조 : Flask-Dash-Heroku 연동 미리보기 다음과 같이 메뉴가 있도록 코드를 작성할 예정이다.</description>
    </item>
    
    <item>
      <title>Flask-Dash-Heroku 연동</title>
      <link>https://dschloe.github.io/python/dash/flask_dash_heroku/</link>
      <pubDate>Thu, 18 Aug 2022 09:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/dash/flask_dash_heroku/</guid>
      <description>개요 Flask 및 Dash를 활용하여 간단한 대시보드를 생성할 수 있다. 기존 구현한 대시보드를 Heroku에 배포할 수 있다. 사전준비 파이썬 가상환경 설치 및 기존 라이브러리에 대한 이해가 어느정도 있음을 가정한 상태에서 본 블로그를 작성했음을 유의한다. Heroku 회원가입 및 로그인이 되어 있어야 한다. Step 1. Github Repo생성 Github Repo 생성 시, 중복되지 않을 법한 이름으로 생성 필자 Repo : flask-heroku-dash-evan1234 해당 Repo를 로컬로 가져온다. git clone https://github.com/your_name/your_unique_repo.git Step 2. 가상환경 설치 및 주요 라이브러리 설치 먼저 가상환경을 설치한다.</description>
    </item>
    
    <item>
      <title>[Python] 카카오톡 챗봇 오픈빌더를 활용한 사칙연산 계산기 구현</title>
      <link>https://dschloe.github.io/python/kakao_chatbot/chatbot_calculator/</link>
      <pubDate>Mon, 16 May 2022 14:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/kakao_chatbot/chatbot_calculator/</guid>
      <description>읽기 전 공지 본 글은 2022년 11월 28일까지만 유효합니다. 무료 버전이 사라지기 때문에, 앞으로 어떻게 될지는 현재 글 쓰는 시점에서는 모릅니다. 이 부분에 주의해서 참고 하시기를 바랍니다. 개요 카카오톡 챗봇 만들기를 Python + FLASK를 통해 간단한 튜토리얼을 만들어본다. 사전준비 OBT 참여승인을 받아야 한다. 기본설정 카카오톡 챗봇 버튼 클릭 후, 봇 이름 생성 [봇 만들기] - [카카오톡 챗봇] 카카오톡 채널 연결을 진행한다. virtualenv를 활용하여 가상환경을 설정한다.
$ virtualenv venv created virtual environment CPython3.</description>
    </item>
    
  </channel>
</rss>
