<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Settings on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/settings/</link>
    <description>Recent content in Settings on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Apr 2022 14:00:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/settings/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows 10 도커 설치 과정 (2022 ver)</title>
      <link>https://dschloe.github.io/settings/windows_docker_install/</link>
      <pubDate>Tue, 05 Apr 2022 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/windows_docker_install/</guid>
      <description>개요  주요 참고자료는 다음과 같다.  WSL2 설치 : https://www.lainyzine.com/ko/article/how-to-install-wsl2-and-use-linux-on-windows-10/#google_vignette 도커 설치 : https://www.lainyzine.com/ko/article/a-complete-guide-to-how-to-install-docker-desktop-on-windows-10/    Step 1. WSL2 설치 과정  Windows PowerShell 관리자로 실행 후 다음 명령어 입력  $ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart $ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart  위 명령어 실행 후, 재부팅 필수 x64 머신용 최신 WSL2 Linux 커널 업데이트 패키지를 다운로드 받아 안내에 따라 설치합니다. Windows Powershell 열고 아래 코드 실행  $ wsl --set-default-version 2 WSL 2와의 주요 차이점에 대한 자세한 내용은 https://aka.</description>
    </item>
    
    <item>
      <title>Hexo Blog 재연결</title>
      <link>https://dschloe.github.io/settings/hexo_blog_reconnected/</link>
      <pubDate>Fri, 26 Nov 2021 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hexo_blog_reconnected/</guid>
      <description>문제점  몇몇 수강생이 노트북과 데스트탑 자리 모두에서 깃헙 블로그를 운영하고 싶어함. 또한, 기존에 올라간 블로그 소스를 그대로 사용하고 싶어함. 그런데, 제대로 반영이 안되는 경우가 있음.  해결책  그런 경우 아래와 같이 순차적으로 진행하면 된다.  $ hexo init your_blog_repo # 여기는 각자 소스 레포 확인 $ cd myblog $ git init $ git remote add origin https://github.com/your_name/your_blog_repo.git # 각자 소스 레포 주소  아래 명령어에서 에러가 발생이 있다.  $ git pull --set-upstream origin main # 에러 발생  그런 경우, 아래 명령어를 추가한다.</description>
    </item>
    
    <item>
      <title>Hexo Blog 이미지 추가</title>
      <link>https://dschloe.github.io/settings/hexo_img/</link>
      <pubDate>Thu, 21 Oct 2021 12:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hexo_img/</guid>
      <description>Hexo 이미지 추가  Hexo 블로그 작성 시, 이미지 파일을 추가하는 방법에 대해 배운다. 주요 참고자료  Asset Folders: https://hexo.io/docs/asset-folders Asset Folders | Hexo - Static Site Generator | Tutorial 9: https://youtu.be/feIDVQ2tz0o    방법 1. Global Asset Folder  가장 간편한 방법은 source 폴더 아래 images 폴더를 별도로 만든다. 마크다운에서 아래와 같이 입력을 한다.  ![](/images/image.jpg)  실제로 테스트를 해본다. (logo.md)  image file: https://upload.wikimedia.org/wikipedia/commons/e/e9/Hexo-logo.png    # hexo logo 테스트 - 이미지 !</description>
    </item>
    
    <item>
      <title>File Download VIA SSH Terminal</title>
      <link>https://dschloe.github.io/settings/csv_download_via_ssh/</link>
      <pubDate>Fri, 11 Jun 2021 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/csv_download_via_ssh/</guid>
      <description>1줄 요약  CURL 명령어는 진심 매우 좋더라.  동기부여  SQL 강의를 해야 하는데, 그에 맞는 데이터를 찾는 중이었다. SQL 예제와 함께 있는 데이터를 찾던 중, URL로 적힌 CSV 파일을 확인하였다. 이를 직접 Download로 쉽게 받을 수 있을 까 하는 생각에 구글링 몇개 해보였다.  참고자료   StackoverFlow에 다음과 같은 글을 찾았다.
 URL: How to download CSV via terminal (SSH)?    참고 소스 코드는 아래와 같다.</description>
    </item>
    
    <item>
      <title>pgAdmin4 GUI installation on MacOS M1</title>
      <link>https://dschloe.github.io/settings/pgadmin4/</link>
      <pubDate>Mon, 07 Jun 2021 23:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/pgadmin4/</guid>
      <description>pgAdmin 설치 및 서버 연결 (MacOS)  GUI 프로그램을 설치해본다. Windows는 자동으로 설치가 되기 때문에 생략을 한다. 먼저 해당 싸이트에 접속을 합니다.  URL: https://www.pgadmin.org/download/     macOS를 클릭한 뒤 다음 화면에서 pgAdmin 4 v5.3 최신버전을 다운로드 받도록 합니다.   프로그램을 설치하면 첫 화면에서 Password를 입력하도록 합니다.   새로운 서버를 생성하여 서버를 등록하도록 합니다. 그 후에 이름은 LocalTest라고 정합니다.   그 후에, username은 postgres를 username으로 입력하고 Postgresql을 설치할 때 설정한 password를 입력합니다.</description>
    </item>
    
    <item>
      <title>Postgre SQL Installation on Windows 10</title>
      <link>https://dschloe.github.io/settings/postgresql_install_windows/</link>
      <pubDate>Fri, 04 Jun 2021 07:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/postgresql_install_windows/</guid>
      <description>Windows  PostgreSQL Downloads  URL: https://www.enterprisedb.com/downloads/postgres-postgresql-downloads 각 컴퓨터에 맞는 버전을 선택합니다.      필자는 13.3 버전을 선택하였습니다.
  이번에는 프로그램을 클릭하여 설치를 진행합니다.   모든 값은 default로 진행합니다.
  비밀번호는 작성 후, 반드시 기억하시기를 바랍니다.
 필자는 temp라고 명명하였습니다.     포트는 5432를 확인합니다.   언어는 한국어로 선택하도록 합니다.   몇번의 Next를 더 누르시면서, 설치를 진행합니다.    설치가 완료되면 Stack Builder 체크 박스는 제 후 완료를 합니다.</description>
    </item>
    
    <item>
      <title>Postgre SQL Installation on MacOS M1</title>
      <link>https://dschloe.github.io/settings/postgresql_install/</link>
      <pubDate>Mon, 31 May 2021 07:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/postgresql_install/</guid>
      <description>1줄 요약  MacOS M1에서 PostgreSQL 설치에서 중요한 건 환경변수만 추가한다.  M1의 구조  M1애서는 Intel, Silicon, Universal 3개의 시스템을 지원한다.  그런데, PostgreSQL 프로그램은 기본적으로 Intel 기반으로 작동을 한다.     Postgre SQL 다운로드   해당 웹 페이지로 간다. (URL: https://postgresapp.com/)   다운로드 받은 후 Postgres-2.4.3-13.dmg (2021.5.31일 기준) 설치 파일을 클릭한 후, 아래 화면이 나오면, 설치를 진행합니다.   설치 진행이 완료가 되면 아래 화면에서 Initialize 또는 Start 버튼을 클릭하면 설치는 끝이 납니다.</description>
    </item>
    
    <item>
      <title>R Path Setting on MacOS</title>
      <link>https://dschloe.github.io/settings/r_path/</link>
      <pubDate>Mon, 03 May 2021 13:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/r_path/</guid>
      <description>1줄 요약  터미널에서 R 실행이 안된다면 PATH를 설정한다.  문제 상황  MacOS 터미널에서 R을 실행하고 싶은데, 가끔 아래와 같은 에러 메시지가 나올때가 있다.  $ R bash: R: command not found 문제 해결   이는 환경설정 문제이다. 즉, 이러한 경우에는 여러 솔루션이 있다.
 Ref. Running R from Mac OSX terminal    그 중에서 필자는 Fourth Solution: 선택하였다.
  $ export PATH=&amp;#34;/Library/Frameworks/R.framework/Resources:$PATH&amp;#34;  그 후에 terminal에서 which R을 실행해본다.</description>
    </item>
    
    <item>
      <title>(Python) Defining the Encoding</title>
      <link>https://dschloe.github.io/settings/encoding/</link>
      <pubDate>Fri, 23 Apr 2021 09:30:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/encoding/</guid>
      <description>1줄 요약  공식 문서를 한번 읽어보도록 합니다.  Why?  한글 사용자에게 인코딩은 언제나 어렵습니다. 한글 깨져요&amp;hellip; 그리고 파이썬의 기본 인코딩은 ASCII라 합니다.  How to use  임의의 .py 파일에서 다음과 같이 시작을 합니다.  #!/usr/bin/python # -*- coding: utf-8 -*- import os, sys ...   첫줄은 /usr/bin에 있는 파이썬에서 실행한다는 의미.
 경로는 각자의 코드에서 수정 가능    두번째 줄은 File Encoding 형식을 지정</description>
    </item>
    
    <item>
      <title>Google Colab에서 Kaggle API 쉽게 사용하는 방법</title>
      <link>https://dschloe.github.io/settings/kaggle_api_easy_to_use/</link>
      <pubDate>Tue, 30 Mar 2021 16:31:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kaggle_api_easy_to_use/</guid>
      <description>한줄 요약  귀찮지만 한 2개의 Cell은 입력후 실행하자.  개요  Google Colab에서 Kaggle을 사용하려면 보통 다음과 같은 과정을 거칩니다. 패키지 설치는 필수입니다.  !pip install kaggle Requirement already satisfied: kaggle in /usr/local/lib/python3.7/dist-packages (1.5.10) Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.8.1) Requirement already satisfied: six&amp;gt;=1.10 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.15.0) Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.24.3) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.</description>
    </item>
    
    <item>
      <title>왜 Git 그래프가 채워지지 않는가?</title>
      <link>https://dschloe.github.io/settings/git_commit_issue/</link>
      <pubDate>Mon, 29 Mar 2021 15:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/git_commit_issue/</guid>
      <description>1줄 요약  이메일을 확인하자.  개요  필자는 강의를 위해 깃헙 계정이 여러개가 존재함 강사용 PC에서 지속적으로 Commit을 진행했으나 Github 그래프가 출력이 되지 않는 오류 발생을 해결하는 과정에서 확인  Github 질의   Why are my contributions not showing up on my profile? 이런 글이 있습니다.
  그러나, 제 경우에는 제 개인 PC는 반영이 잘 되고, 강사 PC에는 안되는 상황이어서, 맞지 않은 케이스였습니다.
  왜? 공통 이유 중의 하나는 이메일  이 때, 가장 중요한 것은 이메일입니다.</description>
    </item>
    
    <item>
      <title>Windows 10 KoNLP 설치</title>
      <link>https://dschloe.github.io/settings/konlp_issue/</link>
      <pubDate>Fri, 26 Mar 2021 14:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/konlp_issue/</guid>
      <description>한줄 요약  KoNLP는 여기에서 무조건 해결한다.  KoNLP 이슈  R에서 텍스트 마이닝을 진행할 때에는 반드시 한번쯤은 패키지 설치로 인해 어려움을 겪는다. - R 입문자 분들이 초반에 호기롭게 시작하였다가 대부분 포기하려고 하는 지점이기도 하다. 사실, 조금 더 간편한 방법이 나오기를 기대한다.  1단계 Java 설치 및 환경 변수 설정   주의: 윈도우 10 64비트
  여러 좋은 자료들이 많아서 같이 참고하기를 바란다.
 Java 설치 관련: [JAVA] Windows에 자바 설치하기!</description>
    </item>
    
    <item>
      <title>Linux 기본 명령어</title>
      <link>https://dschloe.github.io/settings/linux_command/</link>
      <pubDate>Tue, 09 Mar 2021 10:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/linux_command/</guid>
      <description>개요  기본 문법을 다뤄봅니다. (추가적으로 올리고 싶을 때마다 정리해서 올릴 예정입니다.)  unzip  만약에 여러개의 zip 파일을 받는다면 어떻게 해야할까? 다음과 같이 할 수도 있다.  $ unzip a.zip b.zip c.zip d.zip  코드가 조금 길어지는 것 같다. 간단하게 하면 다음과 같이 할 수도 있다. 캐글 대회 데이터를 직접 응용하도록 한다.  $ kaggle competitions download -c sf-crime Warning: Looks like you&amp;#39;re using an outdated API Version, please consider updating (server 1.</description>
    </item>
    
    <item>
      <title>CI CD Pipeline for Data Science</title>
      <link>https://dschloe.github.io/settings/ci_cd_pipeline/</link>
      <pubDate>Tue, 02 Mar 2021 16:31:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/ci_cd_pipeline/</guid>
      <description>개요  최근 밑바닥부터 시작하는 딥러닝 3로 수업을 수강생들과 진행하며 배포에 관한 내용이 있었습니다. (p 98). 구체적인 방법은 소개하지 않아서, 보충 자료로 작성하였다. 전 단계별로 진행하는데, 깃허브에 관한 기본적인 내용 및 코드는 알고 있다는 전제하에 작성하였다.  깃허브를 처음 접하시는 분들은 Github Project 포트폴리오를 참고하기를 바란다.    필요한 것  Github: https://github.com/ Travis-CI: https://www.travis-ci.com/ Codecov: https://about.codecov.io/ PyPI: https://pypi.org/  Steps - Travis Logins   Travis에 깃허브로 로그인 한다.</description>
    </item>
    
    <item>
      <title>ml 개발환경 세팅</title>
      <link>https://dschloe.github.io/settings/m1_settings/</link>
      <pubDate>Thu, 21 Jan 2021 01:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/m1_settings/</guid>
      <description>개요   M1에서 GPU를 활용한 딥러닝을 수행하는 예제 코드를 구현해봤다.
 참고: M1 tensorflow Test Preview    Apple 공식 Repo대로 설치를 하면 잘 될 것이라 생각했지만, 생각지 못한 복병을 만났다.
  어떻게 해결했는지 그 과정에 대해 잠깐 기술하려고 한다.
  Rosetta 너는 누구니?  그동안 맥북은 인텔 기반의 Mac 프로세서를 사용해왔고, M1은 애플이 개발한 프로세서를 처음 도입한 것이다. 그런데, 이게 왜 문제가 되는 것일까?  </description>
    </item>
    
    <item>
      <title>(Mac) Python 기본 환경설정 및 주피터 노트북 설치</title>
      <link>https://dschloe.github.io/settings/jupyter_notebook_mac/</link>
      <pubDate>Sun, 03 Jan 2021 00:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/jupyter_notebook_mac/</guid>
      <description>개요  M1 맥북을 구입 후, 환경 설정을 하다보며, 기록을 남기기로 하였다. 환경변수에 대해 살짝 다루도록 한다. Jupyter Notebook 설치를 진행해본다.  Note: 아나콘다가 아닌, Python 공식홈페이지에서 다운 받은 것을 전제로 한다.    설정 1. zsh to bash 환경으로 바꾸기  필자는 zsh는 잘 쓰지 않았다. 그런데, Mac은 Default로 bash 환경을 쓴다. 써보지 않았기에, bash로 바꾸도록 한다. (쉽다!)  $ chsh -s /bin/bash  위 설정을 진행한 후, 터미널을 종료한 뒤 다시 시작한다.</description>
    </item>
    
    <item>
      <title>Hugo Blog 옮기기</title>
      <link>https://dschloe.github.io/settings/hugo_blog/</link>
      <pubDate>Wed, 30 Dec 2020 17:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hugo_blog/</guid>
      <description>개요  새로운 맥을 구입하면서 생긴 여러 에러를 해결하면서 기록으로 남겼다.  선수 학습  본 포스트는 기존 hugo 깃허브 블로그를 운영중인 독자들을 위한 글이다. 만약 깃허브 블로그를 처음 만드시는 분은 공식 홈페이지를 참조하기를 바란다.  https://gohugo.io/getting-started/installing/    기존 블로그 활용  필자는 blog라는 깃허브 repo가 존재하였음 따라서, blog 레포를 내려 받았다.  $ git clone https://github.com/yourname/your_repo.git 상황 1. submodule에 대한 충분하지 못한 이해  필자가 실수한 것이 있다.</description>
    </item>
    
    <item>
      <title>Git 명령어 중급편</title>
      <link>https://dschloe.github.io/settings/git_intermediate/</link>
      <pubDate>Tue, 22 Dec 2020 21:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/git_intermediate/</guid>
      <description>개요  커밋을 하기 전에 확인해야 할 기본적인 명령어 등을 확인해본다. tracked 상태의 파일을 untracked 상태로 변경하는데, 스테이지에 등록하는 것과 반대 과정이라고 보면 된다. stage 상태에 있는 것을 unstage 상태로 변경하려면 삭제(rm)나 리셋(reset) 명령어를 사용한다.  파일 등록 취소  rm 명령어로 삭제 하려면, 기억해야 하는 것은 스테이지 영역에서만 등록된 파일을 삭제하려면 --cached 옵션을 함께 사용한다.  $ git rm --cached main.py rm &amp;#39;main.py&amp;#39;  캐시 목록에서 파일이 삭제가 된 이후에 git status를 실행해본다.</description>
    </item>
    
    <item>
      <title>Git 명령어 기본편</title>
      <link>https://dschloe.github.io/settings/git_basic/</link>
      <pubDate>Mon, 21 Dec 2020 21:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/git_basic/</guid>
      <description>개요  깃 명령어의 기본적인 명령어를 실행하는 것을 목표로 한다. 깃 설치 및 깃허브 설치는 기존 게시글을 확인해본다.  Github Project 포트폴리오    Git 환경설정  git 명령어를 입력 시, 제대로 실행되지 않았다면 환경변수를 추가한다.  윈도우에서 제어판을 실행한 후 시스템 &amp;gt; 고급 시스템 설정 &amp;gt; 고급 &amp;gt; 환경 변수를 작성한다.   시스템 변수 항목에서 Path를 더블클릭하도록 한다. 환경 변수 편집 창에 C:\Program Files\Git\cmd 경로를 추가한다.  영상을 통해서 한번 보도록 한다.</description>
    </item>
    
    <item>
      <title>(Ref) Tools to Design or Visualize Architecture of Neural Network</title>
      <link>https://dschloe.github.io/settings/tools_design_for_neural_network/</link>
      <pubDate>Fri, 20 Nov 2020 14:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/tools_design_for_neural_network/</guid>
      <description>소개  항상 좋은 글을 올려주시는 존경하는 Pega님의 소개로 올려드립니다.  Pega님 블로그: https://jehyunlee.github.io/    Tools to Design or Visualize Architecture of Neural Network  draw_convnet : Python script for illustrating Convolutional Neural Network (ConvNet)  NNSVG  PlotNeuralNet : Latex code for drawing neural networks for reports and presentation. Have a look into examples to see how they are made. Additionally, lets consolidate any improvements that you make and fix any bugs to help more people with this code.</description>
    </item>
    
    <item>
      <title>(R&#43;Git) 초보자를 위한 깃허브 연동 및 에러 대처법</title>
      <link>https://dschloe.github.io/settings/rstudio_git_beginner/</link>
      <pubDate>Tue, 06 Oct 2020 09:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/rstudio_git_beginner/</guid>
      <description>개요  본 Repo는 강림직업전문학교 수강생을 위해 예시로 작성한 Repo입니다. 본 Repo에서는 R을 활용한 데이터 과학 발표자료를 공유하기 위해 만들어졌습니다.  Git &amp;amp; Github   우선 Git을 설치합니다.
 싸이트: https://git-scm.com/ 설정은 모두 기본 값으로 해주시기 바랍니다.    Terimnal 창에서 git을 실행하여 정상적으로 설치되었는지 유무를 확인합니다.
  그 다음은 Github에 회원가입을 합니다
 저장소를 만드는 과정은 아래 싸이트를 참조바랍니다.  싸이트: https://goddaehee.tistory.com/221      이제 RStudio에서 프로젝트를 클릭한 후 아래 화면에서 Version Control을 클릭합니다.</description>
    </item>
    
    <item>
      <title>Global Development Resources</title>
      <link>https://dschloe.github.io/settings/resources/</link>
      <pubDate>Fri, 31 Jul 2020 10:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/resources/</guid>
      <description>공지 제 전공과 관련하여 주요 자료를 정리하였습니다. 데이터과학의 다양한 이론 중에서 국제개발에 적용시킬만한 내용이 무엇인지 고민하며 계속적으로 자료를 업데이트 할 예정입니다.
OECD 자료  DAC Peer Review Reference Guide  대략 5년 마다 한번씩 각 회원국들의 개발협력 정책과 사업들에 대해 면밀히 검토를 하고 있으며, 연간 6개 회원국들을 대상으로 한다. 이 때, 위 문서를 근거로 동료 평가를 시행한다.   OECD Development Co-operation Peer Reviews: Korea 2018  한국어: OECD 개발협력 동료검토 Peer Reviews 대한민국 2018    UN 자료  The Sustainable Development Goals Report 2020  Project Management  Project Cycle Management Project Design Matrix Logical Framework Approach  </description>
    </item>
    
    <item>
      <title>Hexo Blog 만들기</title>
      <link>https://dschloe.github.io/settings/hexo_blog/</link>
      <pubDate>Mon, 13 Jul 2020 12:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/hexo_blog/</guid>
      <description>개요  간단하게 Hexo 블로그를 만들어 본다.  I. 필수 파일 설치  1단계: nodejs.org 다운로드  설치가 완료 되었다면 간단하게 확인해본다.    $ node -v  2단계: git-scm.com 다운로드  설치가 완료 되었다면 간단하게 확인해본다.    $ git --version  3단계: hexo 설치  hexo는 npm을 통해서 설치가 가능하다.    $ npm install -g hexo-cli II. 깃허브 설정  두개의 깃허브 Repo를 생성한다.  포스트 버전관리 (name: myblog) 포스트 배포용 관리 (name: rain0430.</description>
    </item>
    
    <item>
      <title>Github Project 포트폴리오</title>
      <link>https://dschloe.github.io/settings/github_settings/</link>
      <pubDate>Tue, 07 Jul 2020 13:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/github_settings/</guid>
      <description>개요  본 포스트는 깃허브 프로젝트 관리에 관한 것이다.  I. 프로필 작성하기  이력서에 준하는 프로필 또는 유니크한 것을 살리는 것이 좋다. 깔끔한 정장을 입고, 이쁘게 화장을 하고, 면접을 보러가듯이 인사담당자가 보는 이로 하여금 좋은 인상을 심어줘야 한다. 성명, 이메일, 전화번호 등은 가급적 자세하게 기록해두는 것이 좋다. 프로젝트는 현재 진행중인 Pinned Repositories 상위 3~4개 정도 올려 놓는 것이 좋다.   만약에 현재 기여하는 오픈 소스 리퍼지토리가 있다면 반드시 메인 화면에 고정시킨다.</description>
    </item>
    
    <item>
      <title>Google Colab with Kaggle - Beginner</title>
      <link>https://dschloe.github.io/settings/kaggle_with_colab_beginner/</link>
      <pubDate>Wed, 17 Jun 2020 20:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kaggle_with_colab_beginner/</guid>
      <description>I. 개요  데이터 시각화와 변환에 대해 짧게 익혔다면 바로 실전 데이터를 활용한다. 이론이 조금 부족하게 느껴질 수 있지만, 모든 것을 다 알려드릴 수는 없다.  결국 공부는 스스로 해야 한다.   이 강의의 목적이 Kaggle 데이터를 활용한 Python 포트폴리오 제작 강의임을 잊지 말자.  II. Kaggle KPI 설치  Google Colab에서 Kaggle API를 불러오려면 다음 소스코드를 실행한다.  !pip install kaggle Requirement already satisfied: kaggle in /usr/local/lib/python3.6/dist-packages (1.5.6) Requirement already satisfied: requests in /usr/local/lib/python3.</description>
    </item>
    
    <item>
      <title>Kakao Arena 3 EDA on Google Colab</title>
      <link>https://dschloe.github.io/settings/kakao_arena_3_eda/</link>
      <pubDate>Sun, 24 May 2020 13:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kakao_arena_3_eda/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
이전 포스트인 Colab + Drive + Github Workflow 실전 테스트용으로 생각하면서 읽어주기를 바란다.
I. 개요  프로젝트 폴더 내에서 간단하게 EDA를 실습하는 시간을 갖도록 한다. 관련 패키지는 우선 다른 곳에서 설치 되었다는 것을 가정한다.  참고: Python Package Settings on Google Colab   본 포스트의 핵심은 환경설정이 Google Colab + Drive내에서 작업하는 것이다.</description>
    </item>
    
    <item>
      <title>Colab &#43; Drive &#43; Github Workflow</title>
      <link>https://dschloe.github.io/settings/colab_drive_github_settings/</link>
      <pubDate>Sun, 24 May 2020 11:11:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/colab_drive_github_settings/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 동기 부여 및 개요   Google Colab을 알게 된 이후에, 모든 파일을 가급적 여기에서 작성을 한다.
  Why?
 첫째, GPU를 무료로 사용할 수 있다. 둘째, 맥북에어의 저용량을 쓰는 나에게 있어, 시스템 파일 등을 Local로 내려받는데 버거움이 있다. 셋째, 온라인 강의 및 책을 협업해서 써야 하는데, 각 Local 환경을 구축하는 번거로움을 없애고 싶었다.</description>
    </item>
    
    <item>
      <title>Python Package Settings on Google Colab</title>
      <link>https://dschloe.github.io/settings/colab_package_settings/</link>
      <pubDate>Sat, 23 May 2020 21:01:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/colab_package_settings/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 개요  교육상, 최근 kaggle 및 국내 경진 대회에 참여할 일이 생겼다. 실습을 해보니, 매번 패키지와 파일을 다운로드 받는 것이 많이 불편했다.  파일을 열 때마다, !pip install name_of_package을 실행해야 하는 번거로움이 있다.   이러한 해결책으로 파이썬 패키지를 Google Colab에 영구적(Permantly)으로 설치하는 것을 실습한다.</description>
    </item>
    
    <item>
      <title>Kaggle with Google Colab</title>
      <link>https://dschloe.github.io/settings/kaggle_with_colab/</link>
      <pubDate>Wed, 20 May 2020 08:12:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/kaggle_with_colab/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
I. 개요  Kaggle 대회에서 나오는 데이터의 용량은 작은 편은 아니다. 성능이 적은 노트북을 사용해야 하는 경우라면 Google Colab을 사용해야 한다. 이 때, Kaggle 데이터를 Google Colab으로 다운로드 받는 과정에 대해 기술 하려고 한다.  II. 캐글 계정에서 해야 할 것  먼저 본인의 계정에서 API Token을 다운로드 받는다.</description>
    </item>
    
    <item>
      <title>Hugo - 이미지 위치 설정</title>
      <link>https://dschloe.github.io/settings/image_center/</link>
      <pubDate>Sat, 16 May 2020 17:20:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/image_center/</guid>
      <description>I. Problem Hugo에서 이미지를 업로드하면 자동적으로 왼쪽(Left) 정렬이 된다. 기본적으로 마크다운 내에서 html 적용은 되지 않는 문제점이 있다.
 아래는 기본적인 img 업로드 방식이다.  ![](/img/python/basic_syntax/numpy.png)  위 그림처럼 왼쪽으로 치우친 것을 볼 수 있다. 이럴 경우 어떻게 해결해야 할까? 간단하게 해결 방법을 정리하여 공유한다.  II. CSS 파일 찾기  기본적으로 이미지를 핸들링 하는 것은 CSS 파일에서 해결한다. 문제는 어떤 CSS 파일을 열어야 하는지 처음에는 어려울 것이다. 첫째, 대부분 hugo 개발자들이 테마를 사용하기 때문에 테마에서 css 파일을 찾는다.</description>
    </item>
    
    <item>
      <title>Github에 Daily 코딩 설정</title>
      <link>https://dschloe.github.io/settings/daily_coding/</link>
      <pubDate>Sat, 09 May 2020 10:00:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/daily_coding/</guid>
      <description>I. Motivation 오늘은 데이터 분석과 크게 관련이 없는 포스팅을 해보자. 오늘 깃허브에 꾸미려고 하는 것은 아래와 같다.
주로 깃허브를 올리는 시간은 언제인가? 그저 단순 재미로 포스팅을 해본다.
II. Prep Work  첫번째, Gist를 클릭하여 활성화를 합니다. (https://gist.github.com/) 두번째, 이제 토큰을 생성하자. 이 때 중요한 것은 rest &amp;amp; gist를 클릭한 뒤 생성을 해야 한다. (https://github.com/settings/tokens/new)   Note에는 토큰 생성 목적을 기재하면 된다. (필자는 Productivity Box)라고 했다. Select Scope에서 rest &amp;amp; gist를 아래 그림과 같이 클릭하자.</description>
    </item>
    
    <item>
      <title>matplotlib 한글 폰트 오류 해결</title>
      <link>https://dschloe.github.io/settings/matplotlib_koreanfont/</link>
      <pubDate>Fri, 17 Apr 2020 23:15:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/matplotlib_koreanfont/</guid>
      <description>공지 제 수업을 듣는 사람들이 계속적으로 실습할 수 있도록 강의 파일을 만들었습니다. 늘 도움이 되기를 바라며. 참고했던 교재 및 Reference는 꼭 확인하셔서 교재 구매 또는 관련 Reference를 확인하시기를 바랍니다.
도움이 되었다면 Github에 Star를 눌러주세요.
 python_visualisation  Matplotlib 한글폰트 오류 해결 한글을 사랑하지만, 코딩의 예외다. 프로그래밍 언어 자체가 영어기반이기 때문에 그런것도 있고, 아무튼 한글 부분이 네모 박스로 표시되면서 한글폰트가 깨지는 현상이 종종 발생한다. 오류를 해결하려면 먼저 한글폰트를 지정하는 다음의 코드를 추가해야 한다.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Mathjax 설정</title>
      <link>https://dschloe.github.io/settings/mathjax/</link>
      <pubDate>Wed, 15 Apr 2020 13:40:30 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/mathjax/</guid>
      <description>I. 인라인 수식 에러 한동안 수식 에러를 많나 고생하였다. $$ ... $$ 코드는 잘 적용이 되었다. 그런데, 글 중간에 수식을 넣는 건 잘 되지 않았다. $ ... $ 표현하면 수식문법이 그대로 나와서 글의 가독성이 조금 떨어져 있었다. 통계수식을 넣어주면, 그냥 무언가 전문가스럽다! 전문가도 아니지만 ㅎㅎ
 $x_{i}$ 내가 표현하고자 하는 것 Vs. x_{i} 실제로 화면에 나오는 것  그리고, 한동안 헤매었다. 길은 알고 있었으나, 역시 적용이 쉽지 않았다. 아래는 해결 방안을 공유한다.</description>
    </item>
    
    <item>
      <title>Connecting Jupyter Notebook to VS Code</title>
      <link>https://dschloe.github.io/settings/settings02_vscode2jupyter/</link>
      <pubDate>Sun, 05 Apr 2020 00:30:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/settings/settings02_vscode2jupyter/</guid>
      <description>I. 개요 VS Code에 Jupyter Notebook을 연동해본다. 강사는 R &amp;amp; Python을 연동해서 작업할 일이 많다. 특히 블로그를 쓰다보면 더욱 그러한 일이 많은데, IDE가 많으면 많을수록 무언가 복잡스러워 보일 때가 많다. 이 때 좀 더 효율적으로 일하고자 하는 마음에 VS Code에 Jupyter Notebook을 추가 및 연동하는 작업을 진행해본다.
II. Installation 내용의 간결화를 위해, VS Code 및 Jupyter Notebook 설치 방법은 본 포스트에서는 생략한다.
 VS Code 설치방법: https://code.visualstudio.com/download Jupyter Notebook 설치 방법: https://jupyter.</description>
    </item>
    
  </channel>
</rss>
