<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scikit-Learn on Data Science | DSChloe</title>
    <link>https://dschloe.github.io/categories/scikit-learn/</link>
    <description>Recent content in Scikit-Learn on Data Science | DSChloe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Aug 2022 11:10:47 +0900</lastBuildDate><atom:link href="https://dschloe.github.io/categories/scikit-learn/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scikit-Learn ML Model with Java</title>
      <link>https://dschloe.github.io/python/python_edu/04_machinelearning/sklearn2java/</link>
      <pubDate>Fri, 05 Aug 2022 11:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/04_machinelearning/sklearn2java/</guid>
      <description>개요  scikit-learn 모델을 JAVA에서 구동 시켜야 한다. 크게 3가지 방법론이 존재한다.(원문 참조 : Moving from Python to Java to deploy your machine learning model to production  embed : Java 코드 내에서 직접 Python 코드 구현 방법. Jython을 이용하지만, 문제는 Scikit-Learn은 지원하지 않는다. 따라서 일반적으로 Flask API를 통해서 지원하기도 한다. transpile : Scikit-Learn 모델을 전달하는 방법. sklearn-porter나 m2cgen를 고려할 수 있다. redevelop : Scikit-Learn 모델을 H20나 Spark의 MLib을 구현한 후 배포하는 방법이다.</description>
    </item>
    
    <item>
      <title>MLFlow with Scikit-Learn</title>
      <link>https://dschloe.github.io/python/python_edu/08_mlops/mlflow_with_sklearn/</link>
      <pubDate>Mon, 11 Jul 2022 10:00:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/08_mlops/mlflow_with_sklearn/</guid>
      <description>개요  Scikit-Learn 모델을 만든 후, MLFlow로 모델을 배포한다. 머신러닝 코드에 대한 설명은 생략한다. 가상환경 설정에 관한 내용도 생략한다.  라이브러리 불러오기  기존 코드에서 mlflow 라이브러리만 추가한다.  %matplotlib inline import numpy as np import pandas as pd import matplotlib as mpl import matplotlib.pyplot as plt import sklearn import seaborn as sns import mlflow import mlflow.sklearn from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split, KFold from sklearn.preprocessing import StandardScaler from sklearn.</description>
    </item>
    
    <item>
      <title>Scikit-Learn OneHot Encoding 다양한 적용 방법</title>
      <link>https://dschloe.github.io/python/python_edu/04_machinelearning/one_hot_encoding_using_scikit_learn/</link>
      <pubDate>Sat, 02 Apr 2022 11:10:47 +0900</pubDate>
      
      <guid>https://dschloe.github.io/python/python_edu/04_machinelearning/one_hot_encoding_using_scikit_learn/</guid>
      <description>개요  One-Hot Encoding 개념에 대해 이해한다. One-Hot Encoder 사용법을 익힌다.  One-Hot Encoding  One-Hot Encoding은 문자를 숫자로 변환하는 것이다. 먼저 그림을 보면서 이해하도록 한다.   머신러닝 알고리즘은 데이터가 모두 숫자인 것으로 이해하기 때문에 모두 변환해주어야 한다.  OnetHotEncoder  OneHotEncoder는 Scikit-Learn 라이브러리에 있는 클래스이다.  자세한 내용은 링크를 참조한다.   먼저 예시를 참조한다.  import sklearn print(&amp;#34;sklearn ver.&amp;#34;, sklearn.__version__) sklearn ver. 1.0.2  from sklearn.preprocessing import OneHotEncoder enc = OneHotEncoder(handle_unknown=&amp;#39;ignore&amp;#39;) X = [[&amp;#39;Male&amp;#39;, 1], [&amp;#39;Female&amp;#39;, 3], [&amp;#39;Female&amp;#39;, 2]] enc.</description>
    </item>
    
  </channel>
</rss>
